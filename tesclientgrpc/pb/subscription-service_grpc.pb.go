// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: subscription-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	GetPlan(ctx context.Context, in *GetPlanGrpcRequest, opts ...grpc.CallOption) (*GetPlanGrpcResponse, error)
	CreatePlan(ctx context.Context, in *CreatePlanGrpcRequest, opts ...grpc.CallOption) (*CreatePlanGrpcResponse, error)
	GetActiveSubscription(ctx context.Context, in *GetActiveSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserCurrentSubscription(ctx context.Context, in *GetUserCurrentSubscriptionRequest, opts ...grpc.CallOption) (*GetUserCurrentSubscriptionResponse, error)
	GetUserSubscriptionByOrderId(ctx context.Context, in *GetUserSubscriptionByOrderIdRequest, opts ...grpc.CallOption) (*GetUserSubscriptionByOrderIdResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) GetPlan(ctx context.Context, in *GetPlanGrpcRequest, opts ...grpc.CallOption) (*GetPlanGrpcResponse, error) {
	out := new(GetPlanGrpcResponse)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.SubscriptionService/getPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) CreatePlan(ctx context.Context, in *CreatePlanGrpcRequest, opts ...grpc.CallOption) (*CreatePlanGrpcResponse, error) {
	out := new(CreatePlanGrpcResponse)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.SubscriptionService/createPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetActiveSubscription(ctx context.Context, in *GetActiveSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.SubscriptionService/getActiveSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetUserCurrentSubscription(ctx context.Context, in *GetUserCurrentSubscriptionRequest, opts ...grpc.CallOption) (*GetUserCurrentSubscriptionResponse, error) {
	out := new(GetUserCurrentSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.SubscriptionService/getUserCurrentSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetUserSubscriptionByOrderId(ctx context.Context, in *GetUserSubscriptionByOrderIdRequest, opts ...grpc.CallOption) (*GetUserSubscriptionByOrderIdResponse, error) {
	out := new(GetUserSubscriptionByOrderIdResponse)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.SubscriptionService/getUserSubscriptionByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	GetPlan(context.Context, *GetPlanGrpcRequest) (*GetPlanGrpcResponse, error)
	CreatePlan(context.Context, *CreatePlanGrpcRequest) (*CreatePlanGrpcResponse, error)
	GetActiveSubscription(context.Context, *GetActiveSubscriptionRequest) (*emptypb.Empty, error)
	GetUserCurrentSubscription(context.Context, *GetUserCurrentSubscriptionRequest) (*GetUserCurrentSubscriptionResponse, error)
	GetUserSubscriptionByOrderId(context.Context, *GetUserSubscriptionByOrderIdRequest) (*GetUserSubscriptionByOrderIdResponse, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) GetPlan(context.Context, *GetPlanGrpcRequest) (*GetPlanGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) CreatePlan(context.Context, *CreatePlanGrpcRequest) (*CreatePlanGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetActiveSubscription(context.Context, *GetActiveSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetUserCurrentSubscription(context.Context, *GetUserCurrentSubscriptionRequest) (*GetUserCurrentSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCurrentSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetUserSubscriptionByOrderId(context.Context, *GetUserSubscriptionByOrderIdRequest) (*GetUserSubscriptionByOrderIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubscriptionByOrderId not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.SubscriptionService/getPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetPlan(ctx, req.(*GetPlanGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.SubscriptionService/createPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CreatePlan(ctx, req.(*CreatePlanGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetActiveSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetActiveSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.SubscriptionService/getActiveSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetActiveSubscription(ctx, req.(*GetActiveSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetUserCurrentSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCurrentSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetUserCurrentSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.SubscriptionService/getUserCurrentSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetUserCurrentSubscription(ctx, req.(*GetUserCurrentSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetUserSubscriptionByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubscriptionByOrderIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetUserSubscriptionByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.SubscriptionService/getUserSubscriptionByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetUserSubscriptionByOrderId(ctx, req.(*GetUserSubscriptionByOrderIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.lintang.netflik.models.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getPlan",
			Handler:    _SubscriptionService_GetPlan_Handler,
		},
		{
			MethodName: "createPlan",
			Handler:    _SubscriptionService_CreatePlan_Handler,
		},
		{
			MethodName: "getActiveSubscription",
			Handler:    _SubscriptionService_GetActiveSubscription_Handler,
		},
		{
			MethodName: "getUserCurrentSubscription",
			Handler:    _SubscriptionService_GetUserCurrentSubscription_Handler,
		},
		{
			MethodName: "getUserSubscriptionByOrderId",
			Handler:    _SubscriptionService_GetUserSubscriptionByOrderId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription-service.proto",
}
