// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: subscription-service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId        uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Price         uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ActivePeriod  uint32 `protobuf:"varint,5,opt,name=active_period,json=activePeriod,proto3" json:"active_period,omitempty"`
	DiscountPrice uint32 `protobuf:"varint,6,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"`
}

func (x *PlanDto) Reset() {
	*x = PlanDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanDto) ProtoMessage() {}

func (x *PlanDto) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanDto.ProtoReflect.Descriptor instead.
func (*PlanDto) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{0}
}

func (x *PlanDto) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *PlanDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanDto) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PlanDto) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlanDto) GetActivePeriod() uint32 {
	if x != nil {
		return x.ActivePeriod
	}
	return 0
}

func (x *PlanDto) GetDiscountPrice() uint32 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

type CreatePlanDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Price         uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	ActivePeriod  uint32 `protobuf:"varint,5,opt,name=active_period,json=activePeriod,proto3" json:"active_period,omitempty"`
	DiscountPrice uint32 `protobuf:"varint,6,opt,name=discount_price,json=discountPrice,proto3" json:"discount_price,omitempty"`
}

func (x *CreatePlanDto) Reset() {
	*x = CreatePlanDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanDto) ProtoMessage() {}

func (x *CreatePlanDto) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanDto.ProtoReflect.Descriptor instead.
func (*CreatePlanDto) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePlanDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlanDto) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreatePlanDto) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlanDto) GetActivePeriod() uint32 {
	if x != nil {
		return x.ActivePeriod
	}
	return 0
}

func (x *CreatePlanDto) GetDiscountPrice() uint32 {
	if x != nil {
		return x.DiscountPrice
	}
	return 0
}

type CreateOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PlanId uint64 `protobuf:"varint,2,opt,name=planId,proto3" json:"planId,omitempty"`
}

func (x *CreateOrder) Reset() {
	*x = CreateOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrder) ProtoMessage() {}

func (x *CreateOrder) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrder.ProtoReflect.Descriptor instead.
func (*CreateOrder) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOrder) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateOrder) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

type GetPlanGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreateOrder *CreateOrder `protobuf:"bytes,1,opt,name=createOrder,proto3" json:"createOrder,omitempty"`
}

func (x *GetPlanGrpcRequest) Reset() {
	*x = GetPlanGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanGrpcRequest) ProtoMessage() {}

func (x *GetPlanGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanGrpcRequest.ProtoReflect.Descriptor instead.
func (*GetPlanGrpcRequest) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlanGrpcRequest) GetCreateOrder() *CreateOrder {
	if x != nil {
		return x.CreateOrder
	}
	return nil
}

type CreatePlanGrpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatePlanDto *CreatePlanDto `protobuf:"bytes,1,opt,name=createPlanDto,proto3" json:"createPlanDto,omitempty"`
}

func (x *CreatePlanGrpcRequest) Reset() {
	*x = CreatePlanGrpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanGrpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanGrpcRequest) ProtoMessage() {}

func (x *CreatePlanGrpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanGrpcRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanGrpcRequest) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePlanGrpcRequest) GetCreatePlanDto() *CreatePlanDto {
	if x != nil {
		return x.CreatePlanDto
	}
	return nil
}

type CreatePlanGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanDto *PlanDto `protobuf:"bytes,1,opt,name=planDto,proto3" json:"planDto,omitempty"`
}

func (x *CreatePlanGrpcResponse) Reset() {
	*x = CreatePlanGrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanGrpcResponse) ProtoMessage() {}

func (x *CreatePlanGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanGrpcResponse.ProtoReflect.Descriptor instead.
func (*CreatePlanGrpcResponse) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePlanGrpcResponse) GetPlanDto() *PlanDto {
	if x != nil {
		return x.PlanDto
	}
	return nil
}

type GetPlanGrpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan *PlanDto `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *GetPlanGrpcResponse) Reset() {
	*x = GetPlanGrpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanGrpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanGrpcResponse) ProtoMessage() {}

func (x *GetPlanGrpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanGrpcResponse.ProtoReflect.Descriptor instead.
func (*GetPlanGrpcResponse) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlanGrpcResponse) GetPlan() *PlanDto {
	if x != nil {
		return x.Plan
	}
	return nil
}

// check active subscription
type GetActiveSubscriptionDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetActiveSubscriptionDto) Reset() {
	*x = GetActiveSubscriptionDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveSubscriptionDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveSubscriptionDto) ProtoMessage() {}

func (x *GetActiveSubscriptionDto) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveSubscriptionDto.ProtoReflect.Descriptor instead.
func (*GetActiveSubscriptionDto) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetActiveSubscriptionDto) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SubscriptionDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId              string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Status              string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	EndSubscriptionDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=endSubscriptionDate,proto3" json:"endSubscriptionDate,omitempty"`
	Plan                *PlanDto               `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *SubscriptionDto) Reset() {
	*x = SubscriptionDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionDto) ProtoMessage() {}

func (x *SubscriptionDto) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionDto.ProtoReflect.Descriptor instead.
func (*SubscriptionDto) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{8}
}

func (x *SubscriptionDto) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubscriptionDto) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubscriptionDto) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SubscriptionDto) GetEndSubscriptionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndSubscriptionDate
	}
	return nil
}

func (x *SubscriptionDto) GetPlan() *PlanDto {
	if x != nil {
		return x.Plan
	}
	return nil
}

type GetActiveSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetActiveSubscriptionDto *GetActiveSubscriptionDto `protobuf:"bytes,1,opt,name=getActiveSubscriptionDto,proto3" json:"getActiveSubscriptionDto,omitempty"`
}

func (x *GetActiveSubscriptionRequest) Reset() {
	*x = GetActiveSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveSubscriptionRequest) ProtoMessage() {}

func (x *GetActiveSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetActiveSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetActiveSubscriptionRequest) GetGetActiveSubscriptionDto() *GetActiveSubscriptionDto {
	if x != nil {
		return x.GetActiveSubscriptionDto
	}
	return nil
}

type GetUserCurrentSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetSubscriptionRequestDto *GetActiveSubscriptionDto `protobuf:"bytes,1,opt,name=getSubscriptionRequestDto,proto3" json:"getSubscriptionRequestDto,omitempty"`
}

func (x *GetUserCurrentSubscriptionRequest) Reset() {
	*x = GetUserCurrentSubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrentSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrentSubscriptionRequest) ProtoMessage() {}

func (x *GetUserCurrentSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrentSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetUserCurrentSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserCurrentSubscriptionRequest) GetGetSubscriptionRequestDto() *GetActiveSubscriptionDto {
	if x != nil {
		return x.GetSubscriptionRequestDto
	}
	return nil
}

type GetUserCurrentSubscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionDto *SubscriptionDto `protobuf:"bytes,1,opt,name=subscriptionDto,proto3" json:"subscriptionDto,omitempty"`
}

func (x *GetUserCurrentSubscriptionResponse) Reset() {
	*x = GetUserCurrentSubscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCurrentSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCurrentSubscriptionResponse) ProtoMessage() {}

func (x *GetUserCurrentSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCurrentSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetUserCurrentSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserCurrentSubscriptionResponse) GetSubscriptionDto() *SubscriptionDto {
	if x != nil {
		return x.SubscriptionDto
	}
	return nil
}

type GetUserSubscriptionByOrderIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetUserSubscriptionByOrderIdRequest) Reset() {
	*x = GetUserSubscriptionByOrderIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSubscriptionByOrderIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionByOrderIdRequest) ProtoMessage() {}

func (x *GetUserSubscriptionByOrderIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionByOrderIdRequest.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionByOrderIdRequest) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetUserSubscriptionByOrderIdRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *GetUserSubscriptionByOrderIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetUserSubscriptionByOrderIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubscriptionDto *SubscriptionDto `protobuf:"bytes,1,opt,name=subscriptionDto,proto3" json:"subscriptionDto,omitempty"`
}

func (x *GetUserSubscriptionByOrderIdResponse) Reset() {
	*x = GetUserSubscriptionByOrderIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_subscription_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSubscriptionByOrderIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubscriptionByOrderIdResponse) ProtoMessage() {}

func (x *GetUserSubscriptionByOrderIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubscriptionByOrderIdResponse.ProtoReflect.Descriptor instead.
func (*GetUserSubscriptionByOrderIdResponse) Descriptor() ([]byte, []int) {
	return file_subscription_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetUserSubscriptionByOrderIdResponse) GetSubscriptionDto() *SubscriptionDto {
	if x != nil {
		return x.SubscriptionDto
	}
	return nil
}

var File_subscription_service_proto protoreflect.FileDescriptor

var file_subscription_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x63, 0x6f,
	0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x6e, 0x44,
	0x74, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x44, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x3d, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69,
	0x6e, 0x74, 0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x68, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66,
	0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x67,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f,
	0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74,
	0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x13, 0x65, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61,
	0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x74, 0x6f, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22,
	0x90, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x70, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x67,
	0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x52, 0x18, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74,
	0x6f, 0x52, 0x19, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x22,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69,
	0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x23, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7d, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e,
	0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x6f,
	0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74,
	0x6f, 0x32, 0xa3, 0x05, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x67, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61,
	0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61,
	0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e,
	0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e,
	0x74, 0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e,
	0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x9b, 0x01, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61,
	0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e,
	0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74, 0x61,
	0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x69, 0x6e, 0x74,
	0x61, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x74, 0x66, 0x6c, 0x69, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2f, 0x50, 0x01, 0x5a, 0x2b, 0x74, 0x65, 0x6e,
	0x66, 0x6c, 0x69, 0x78, 0x2f, 0x6c, 0x69, 0x6e, 0x74, 0x61, 0x6e, 0x67, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_subscription_service_proto_rawDescOnce sync.Once
	file_subscription_service_proto_rawDescData = file_subscription_service_proto_rawDesc
)

func file_subscription_service_proto_rawDescGZIP() []byte {
	file_subscription_service_proto_rawDescOnce.Do(func() {
		file_subscription_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_subscription_service_proto_rawDescData)
	})
	return file_subscription_service_proto_rawDescData
}

var file_subscription_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_subscription_service_proto_goTypes = []interface{}{
	(*PlanDto)(nil),                              // 0: com.lintang.netflik.models.PlanDto
	(*CreatePlanDto)(nil),                        // 1: com.lintang.netflik.models.CreatePlanDto
	(*CreateOrder)(nil),                          // 2: com.lintang.netflik.models.CreateOrder
	(*GetPlanGrpcRequest)(nil),                   // 3: com.lintang.netflik.models.GetPlanGrpcRequest
	(*CreatePlanGrpcRequest)(nil),                // 4: com.lintang.netflik.models.CreatePlanGrpcRequest
	(*CreatePlanGrpcResponse)(nil),               // 5: com.lintang.netflik.models.CreatePlanGrpcResponse
	(*GetPlanGrpcResponse)(nil),                  // 6: com.lintang.netflik.models.GetPlanGrpcResponse
	(*GetActiveSubscriptionDto)(nil),             // 7: com.lintang.netflik.models.GetActiveSubscriptionDto
	(*SubscriptionDto)(nil),                      // 8: com.lintang.netflik.models.SubscriptionDto
	(*GetActiveSubscriptionRequest)(nil),         // 9: com.lintang.netflik.models.GetActiveSubscriptionRequest
	(*GetUserCurrentSubscriptionRequest)(nil),    // 10: com.lintang.netflik.models.GetUserCurrentSubscriptionRequest
	(*GetUserCurrentSubscriptionResponse)(nil),   // 11: com.lintang.netflik.models.GetUserCurrentSubscriptionResponse
	(*GetUserSubscriptionByOrderIdRequest)(nil),  // 12: com.lintang.netflik.models.GetUserSubscriptionByOrderIdRequest
	(*GetUserSubscriptionByOrderIdResponse)(nil), // 13: com.lintang.netflik.models.GetUserSubscriptionByOrderIdResponse
	(*timestamppb.Timestamp)(nil),                // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                        // 15: google.protobuf.Empty
}
var file_subscription_service_proto_depIdxs = []int32{
	2,  // 0: com.lintang.netflik.models.GetPlanGrpcRequest.createOrder:type_name -> com.lintang.netflik.models.CreateOrder
	1,  // 1: com.lintang.netflik.models.CreatePlanGrpcRequest.createPlanDto:type_name -> com.lintang.netflik.models.CreatePlanDto
	0,  // 2: com.lintang.netflik.models.CreatePlanGrpcResponse.planDto:type_name -> com.lintang.netflik.models.PlanDto
	0,  // 3: com.lintang.netflik.models.GetPlanGrpcResponse.plan:type_name -> com.lintang.netflik.models.PlanDto
	14, // 4: com.lintang.netflik.models.SubscriptionDto.endSubscriptionDate:type_name -> google.protobuf.Timestamp
	0,  // 5: com.lintang.netflik.models.SubscriptionDto.plan:type_name -> com.lintang.netflik.models.PlanDto
	7,  // 6: com.lintang.netflik.models.GetActiveSubscriptionRequest.getActiveSubscriptionDto:type_name -> com.lintang.netflik.models.GetActiveSubscriptionDto
	7,  // 7: com.lintang.netflik.models.GetUserCurrentSubscriptionRequest.getSubscriptionRequestDto:type_name -> com.lintang.netflik.models.GetActiveSubscriptionDto
	8,  // 8: com.lintang.netflik.models.GetUserCurrentSubscriptionResponse.subscriptionDto:type_name -> com.lintang.netflik.models.SubscriptionDto
	8,  // 9: com.lintang.netflik.models.GetUserSubscriptionByOrderIdResponse.subscriptionDto:type_name -> com.lintang.netflik.models.SubscriptionDto
	3,  // 10: com.lintang.netflik.models.SubscriptionService.getPlan:input_type -> com.lintang.netflik.models.GetPlanGrpcRequest
	4,  // 11: com.lintang.netflik.models.SubscriptionService.createPlan:input_type -> com.lintang.netflik.models.CreatePlanGrpcRequest
	9,  // 12: com.lintang.netflik.models.SubscriptionService.getActiveSubscription:input_type -> com.lintang.netflik.models.GetActiveSubscriptionRequest
	10, // 13: com.lintang.netflik.models.SubscriptionService.getUserCurrentSubscription:input_type -> com.lintang.netflik.models.GetUserCurrentSubscriptionRequest
	12, // 14: com.lintang.netflik.models.SubscriptionService.getUserSubscriptionByOrderId:input_type -> com.lintang.netflik.models.GetUserSubscriptionByOrderIdRequest
	6,  // 15: com.lintang.netflik.models.SubscriptionService.getPlan:output_type -> com.lintang.netflik.models.GetPlanGrpcResponse
	5,  // 16: com.lintang.netflik.models.SubscriptionService.createPlan:output_type -> com.lintang.netflik.models.CreatePlanGrpcResponse
	15, // 17: com.lintang.netflik.models.SubscriptionService.getActiveSubscription:output_type -> google.protobuf.Empty
	11, // 18: com.lintang.netflik.models.SubscriptionService.getUserCurrentSubscription:output_type -> com.lintang.netflik.models.GetUserCurrentSubscriptionResponse
	13, // 19: com.lintang.netflik.models.SubscriptionService.getUserSubscriptionByOrderId:output_type -> com.lintang.netflik.models.GetUserSubscriptionByOrderIdResponse
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_subscription_service_proto_init() }
func file_subscription_service_proto_init() {
	if File_subscription_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_subscription_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanGrpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanGrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanGrpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveSubscriptionDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrentSubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCurrentSubscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSubscriptionByOrderIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_subscription_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSubscriptionByOrderIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_subscription_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscription_service_proto_goTypes,
		DependencyIndexes: file_subscription_service_proto_depIdxs,
		MessageInfos:      file_subscription_service_proto_msgTypes,
	}.Build()
	File_subscription_service_proto = out.File
	file_subscription_service_proto_rawDesc = nil
	file_subscription_service_proto_goTypes = nil
	file_subscription_service_proto_depIdxs = nil
}
