// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: order-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderGrpcRequest, opts ...grpc.CallOption) (*CreateOrderGrpcResponse, error)
	ProcessOrderSaga(ctx context.Context, in *ProcessOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserOrderDetail(ctx context.Context, in *GetUserOrderDetailRequest, opts ...grpc.CallOption) (*GetUserOrderDetailResponse, error)
	GetUserOrderHistory(ctx context.Context, in *GetUserOrderHistoryRequest, opts ...grpc.CallOption) (OrderService_GetUserOrderHistoryClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderGrpcRequest, opts ...grpc.CallOption) (*CreateOrderGrpcResponse, error) {
	out := new(CreateOrderGrpcResponse)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.OrderService/createOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ProcessOrderSaga(ctx context.Context, in *ProcessOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.OrderService/processOrderSaga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetUserOrderDetail(ctx context.Context, in *GetUserOrderDetailRequest, opts ...grpc.CallOption) (*GetUserOrderDetailResponse, error) {
	out := new(GetUserOrderDetailResponse)
	err := c.cc.Invoke(ctx, "/com.lintang.netflik.models.OrderService/getUserOrderDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetUserOrderHistory(ctx context.Context, in *GetUserOrderHistoryRequest, opts ...grpc.CallOption) (OrderService_GetUserOrderHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], "/com.lintang.netflik.models.OrderService/getUserOrderHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceGetUserOrderHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_GetUserOrderHistoryClient interface {
	Recv() (*GetUserOrderHistoryResponse, error)
	grpc.ClientStream
}

type orderServiceGetUserOrderHistoryClient struct {
	grpc.ClientStream
}

func (x *orderServiceGetUserOrderHistoryClient) Recv() (*GetUserOrderHistoryResponse, error) {
	m := new(GetUserOrderHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	CreateOrder(context.Context, *CreateOrderGrpcRequest) (*CreateOrderGrpcResponse, error)
	ProcessOrderSaga(context.Context, *ProcessOrderRequest) (*emptypb.Empty, error)
	GetUserOrderDetail(context.Context, *GetUserOrderDetailRequest) (*GetUserOrderDetailResponse, error)
	GetUserOrderHistory(*GetUserOrderHistoryRequest, OrderService_GetUserOrderHistoryServer) error
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderGrpcRequest) (*CreateOrderGrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) ProcessOrderSaga(context.Context, *ProcessOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOrderSaga not implemented")
}
func (UnimplementedOrderServiceServer) GetUserOrderDetail(context.Context, *GetUserOrderDetailRequest) (*GetUserOrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrderDetail not implemented")
}
func (UnimplementedOrderServiceServer) GetUserOrderHistory(*GetUserOrderHistoryRequest, OrderService_GetUserOrderHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserOrderHistory not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderGrpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.OrderService/createOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderGrpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ProcessOrderSaga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ProcessOrderSaga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.OrderService/processOrderSaga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ProcessOrderSaga(ctx, req.(*ProcessOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetUserOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetUserOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.lintang.netflik.models.OrderService/getUserOrderDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetUserOrderDetail(ctx, req.(*GetUserOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetUserOrderHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserOrderHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).GetUserOrderHistory(m, &orderServiceGetUserOrderHistoryServer{stream})
}

type OrderService_GetUserOrderHistoryServer interface {
	Send(*GetUserOrderHistoryResponse) error
	grpc.ServerStream
}

type orderServiceGetUserOrderHistoryServer struct {
	grpc.ServerStream
}

func (x *orderServiceGetUserOrderHistoryServer) Send(m *GetUserOrderHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.lintang.netflik.models.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "processOrderSaga",
			Handler:    _OrderService_ProcessOrderSaga_Handler,
		},
		{
			MethodName: "getUserOrderDetail",
			Handler:    _OrderService_GetUserOrderDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getUserOrderHistory",
			Handler:       _OrderService_GetUserOrderHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order-service.proto",
}
