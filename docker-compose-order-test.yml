---
version: '3'
networks:
 net:
  name: net
  driver: bridge
  ipam:
    config:
      - subnet: 172.1.1.0/24

services:



  ngrok:
    image: ngrok/ngrok:latest
    volumes:
     - ./ngrok.yml:/etc/ngrok.yml
    ports:
      - 4040:4040
    networks:
      - net
    environment:
      - NGROK_AUTH=${NGROK_AUTH}
    command: ["start", "--none", "--authtoken", "${NGROK_AUTH}"]

  payment-service:
    container_name: payment-service
    build: ./payment-service
    ports:
      - 8800:8800
      - 5006:5006 # debug port
    # env_file:
    #   - config-repo/payment-service.env
    environment:
      - MIDTRANS_SERVERKEY=${MIDTRANS_SERVERKEY}
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONSUL_HOST=172.1.1.17
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_CLOUD_CONSUL_INSTANCEID=payment-service:999
      - SPRING_CLOUD_CONSUL_SERVICENAME=paymentService
      - SPRING_CLOUD_CONSUL_ENABLED=true
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006 # remote debugging

      # - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006 # remote debugging
    networks:
      net:
        ipv4_address: 172.1.1.14
    depends_on:
      - postgres-payment

    platform: linux/arm64/v8

  order-service:
    container_name: order-service
    build: ./order-service
    ports:
      - 9600:9600
      - 5007:5007
    networks:
      net:
        ipv4_address: 172.1.1.13
    depends_on:
      - postgres-order
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONSUL_HOST=172.1.1.17
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_CLOUD_CONSUL_INSTANCEID=order-service:999
      - SPRING_CLOUD_CONSUL_SERVICENAME=orderService
      - SPRING_CLOUD_CONSUL_ENABLED=true
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007 # remote debugging
    platform: linux/arm64/v8

#      golang
  order-aggregator-service:
    container_name: order-aggregator-service
    build:
      context: ./order-aggregator-service-go
#      dockerfile: debug.Dockerfile  # debug
      dockerfile: Dockerfile # tanpa debug
#    security_opt:
#      - "seccomp:unconfined"
#    cap_add:
#      - SYS_PTRACE
    ports:
      - "9900:9900"
#      - "40000:40000"
    environment:
      - MIDTRANS_SERVERKEY=${MIDTRANS_SERVERKEY}
    depends_on:
      - keycloak-tenflix
      - order-service
      - payment-service
      - subscription-service
      - consul-tenflix
#    command: /dlv --headless --listen=:40000 --api-version=2 exec /app # debug
    networks:
      net:
        ipv4_address: 172.1.1.19


    # versi java
#  order-aggregator-service:
#    container_name: order-aggregator-service
#    build: ./order-aggregator-service
#    ports:
#      - 9900:9900
#      - 5009:5009
#    depends_on:
#      - keycloak-tenflix
#      - payment-service
#      - order-service
#      - subscription-service
#      - consul-tenflix
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_CLOUD_CONSUL_HOST=172.1.1.17
#      - SPRING_CLOUD_CONSUL_PORT=8500
#      - SPRING_CLOUD_CONSUL_INSTANCEID=order-aggregator-service:999
#      - SPRING_CLOUD_CONSUL_ENABLED=true
#      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009 # remote debugging
#    networks:
#      net:
#        ipv4_address: 172.1.1.15
#    platform: linux/arm64/v8

  subscription-service:
    container_name: subscription-service
    build: ./subscription-service
    ports:
      - 9100:9100
      - 5008:5008
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONSUL_HOST=172.1.1.17
      - SPRING_CLOUD_CONSUL_PORT=8500
      - SPRING_CLOUD_CONSUL_INSTANCEID=subscription-service:999
      - SPRING_CLOUD_CONSUL_SERVICENAME=subscriptionService
      - SPRING_CLOUD_CONSUL_ENABLED=true
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008 #remote debugging

    networks:
      net:
        ipv4_address: 172.1.1.12
    depends_on:
      - postgres-subscription
    platform: linux/arm64/v8

  kong-database:
    container_name: kong-database
    image: postgres:11-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 3s
      retries: 5
    networks:
      net:
        ipv4_address: 172.1.1.16
    depends_on:
      - consul-tenflix

  kong-migration:
    container_name: kong-migration
    image: kong:latest
    command: "kong migrations bootstrap"
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    networks:
      - net
    links:
      - kong-database
    depends_on:
      - kong-database

  kong:
    container_name: kong
    image: kong:latest
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: 172.1.1.16
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_DB_UPDATE_FREQUENCY: 1m
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_DNS_RESOLVER: 172.1.1.17:8600
    networks:
      net:
        ipv4_address: 172.1.1.40
    depends_on:
      - kong-migration
      - consul-tenflix
    ports:
      - "8001:8001"
      - "8444:8444"
      - "8000:8000"
      - "8443:8443"







  #consul service discovery
  consul-tenflix:
    image: consul:1.15.4
    container_name: consul-tenflix
    restart: always
    ports:
      - 8300:8300
      - 8301:8301
      - 8301:8301/udp
      - 8302:8302
      - 8400:8400
      - 8500:8500
      - 8600:8600
      - 8600:8600/udp
    networks:
      net:
        ipv4_address: 172.1.1.17 #



  postgres-subscription:
    container_name: postgres-subscription
    image: debezium/postgres:15-alpine
    ports:
      - 5430:5432
    networks:
      - net
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - postgres-subscription:/var/lib/postgresql/data
      - "./postgres/postgresql.conf:/etc/postgresql/postgresql.conf"
#      - "./postgres/docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  postgres-order:
    container_name: postgres-order
    image: debezium/postgres:15-alpine
    ports:
      - 5434:5432
    networks:
      - net
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - postgres-order:/var/lib/postgresql/data
      - "./postgres/postgresql.conf:/etc/postgresql/postgresql.conf"
#      - "./postgres/docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  postgres-payment:
    container_name: postgres-payment
    image: debezium/postgres:15-alpine
    ports:
      - 5435:5432
    networks:
      - net
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
    volumes:
      - postgres-payment:/var/lib/postgresql/data
      - "./postgres/postgresql.conf:/etc/postgresql/postgresql.conf"
#      - "./postgres/docker-entrypoint-initdb.d/init.sql:/docker-entrypoint-initdb.d/init.sql"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    ports:
      - 3305:3306
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - net
    platform: linux/arm64/v8

  keycloak-tenflix:
    container_name: keycloak-tenflix
    image: quay.io/keycloak/keycloak:21.1.2
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME_STRICT_HTTPS: false
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/all-realm.json:ro
      JAVA_OPTS_APPEND: -Dkeycloak.migration.strategy=OVERWRITE_EXISTING
      # JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.upload_scripts=enabled"
    networks:
      - net
    ports:
      - 8080:8080
    volumes:
      - ./realms/tenflix-realm.json:/opt/keycloak/data/import/tenflix-realm.json:ro
      - ./realms/master-realm.json:/opt/keycloak/bin/master-realm.json
    depends_on:
      - keycloak-mysql


  pg-admin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@email.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - 5050:5050
    networks:
      - net
    depends_on:
      - postgres-order
      - postgres-subscription
      - postgres-payment


#  zookeeper:
#    image: docker.io/bitnami/zookeeper:3.7
#    container_name: zookeeper
#    networks:
#      - net
#    ports:
#      - "2181:2181"
#    volumes:
#      - "./data/zookeeper_data:/bitnami"
#    environment:
#      ALLOW_ANONYMOUS_LOGIN: yes
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.6
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: "echo stat | nc localhost $$ZOOKEEPER_CLIENT_PORT"
    networks:
      - net

# versi lama
#  kafka:
#    image: docker.io/bitnami/kafka:3
##    image: debezium/kafka:latest
#    container_name: kafka
#    restart: unless-stopped
#    networks:
#      - net
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_CFG_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
#      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
##      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
#      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_CFG_BROKER_ID: 1
#      KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR:
#      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
#      ALLOW_PLAINTEXT_LISTENER: "yes"
#    depends_on:
#      - zookeeper
#
  kafka:
    image: confluentinc/cp-kafka:7.2.6
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:29092,PLAINTEXT_HOST://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
    networks:
      - net

#  kafka-rest-proxy:
#    image: confluentinc/cp-kafka-rest:7.2.6
#    container_name: kafka-rest-proxy
#    restart: unless-stopped
#    depends_on:
#      - zookeeper
#      - kafka
#    ports:
#      - "8082:8082"
#    environment:
#      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
#      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_REST_HOST_NAME: kafka-rest-proxy
#      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
#      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
#    healthcheck:
#      test: "curl -f http://localhost:8082 || exit 1"
#    networks:
#      - net


#  schema-registry:
#    image: confluentinc/cp-schema-registry:7.2.6
#    container_name: schema-registry
#    restart: unless-stopped
#    depends_on:
#      - kafka
#    ports:
#      - "8081:8081"
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
#      SCHEMA_REGISTRY_HOST_NAME: schema-registry
#      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
#    healthcheck:
#      test: "curl -f http://localhost:8081 || exit 1"
#    networks:
#      - net
#
#  kafka-connect:
#    build: docker/kafka-connect
#    container_name: kafka-connect
#    restart: unless-stopped
#    depends_on:
#      - schema-registry
#    ports:
#      - "8083:8083"
#    environment:
#      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
#      CONNECT_REST_PORT: 8083
#      CONNECT_GROUP_ID: compose-connect-group
#      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
#      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
#      CONNECT_OFFSET_STORAGE_PARTITIONS: 3
#      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
#      CONNECT_STATUS_STORAGE_PARTITIONS: 3
#      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
#      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
#      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
#      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
#      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
#      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
#      CONNECT_PLUGIN_PATH: "/usr/share/java"
#    healthcheck:
#      test: "curl -f http://localhost:$$CONNECT_REST_PORT || exit 1"
#    networks:
#      - net


  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9001:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
      CMD_ARGS: "--message.format=AVRO --schemaregistry.connect=http://schema-registry:8081"
    depends_on:
      - kafka
    networks:
      - net



# versi debezium
  kafka-connect:
    image: debezium/connect:latest
    container_name: kafka-connect
    ports:
      - 8083:8083
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
    networks:
      - net
    depends_on:
      - kafka

  # kafka_manager:
  #   image: hlebalbau/kafka-manager:stable
  #   ports:
  #     - "9500:9000"
  #   environment:
  #     ZK_HOSTS: "localhost:2181"
  #     APPLICATION_SECRET: "random-secret"
  #   networks:
  #     - net
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - kafka-connect


volumes:
  postgres-order: {}
  postgres-payment: {}
  postgres-subscription: {}
